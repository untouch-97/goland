package main

import "fmt"

// https://www.digitalocean.com/community/conceptual-articles/understanding-pointers-in-go-ru
func main() {
	var creature = "shark"
	var pointer *string = &creature
	// Мы присвоим первой определяемой переменной имя creature и зададим
	//ее равной строке со значением shark. Затем мы создадим другую переменную
	//с именем pointer. Теперь мы зададим в качестве значения переменной pointer
	//адрес переменной creature. Мы сохраним адрес значения в переменной, используя
	//символ амперсанда (&). Это означает, что переменная pointer хранит адрес
	//переменной creature, а не ее реальное значение.
	fmt.Println("creature =", creature)
	fmt.Println("pointer =", pointer)
	//Если вы хотите вывести значение переменной, на которую указывает
	//переменная pointer, вам нужно разыменовать эту переменную.
	//В следующим коде используется оператор * для снятия ссылки на
	//переменную pointer и получения его значения:
	fmt.Println("*pointer =", *pointer)
	//Если вы хотите изменить значение, сохраненное в месте расположения
	//переменной pointer, вы также можете использовать оператор снятия ссылки:
	*pointer = "jellifish"
	fmt.Println("*pointer =", *pointer)
	//Возможно вы не поняли этого, но мы фактически изменили значение
	//переменной creature. Это связано с тем, что переменная pointer фактически
	//указывает на адрес переменной creature. Это означает, что если мы
	//изменим значение, на которое указывает переменная pointer, мы также
	//изменим значение переменной creature.
	fmt.Println("creature =", creature)
}
